package hello.controller;

import hello.repository.AccountRepository;
import hello.model.Account;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@Api(basePath = "/demo", value = "deneme", description = "Deneme bu")
@RestController // This means that this class is a Controller
// This means URL's start with /demo (after Application path)
public class MainController {

    private AccountRepository accountRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    public void setAccountRepository(AccountRepository accountRepository){
        this.accountRepository = accountRepository;
    }

    @ApiOperation(value = "Post new account", response = Iterable.class)
    @RequestMapping(value = "/api/users/", method = RequestMethod.POST)
    public @ResponseBody List<Account> addNewAccount (@RequestBody Account a) {
        //when called with POST, creates user record
        // @ResponseBody means the returned String is the response, not a view name

        accountRepository.save(a);
        List<Account> accountList = new ArrayList<>();
        accountList.add(a);
        return accountList;
    }

    @ApiOperation(value = "List all account", response = Iterable.class)
    @RequestMapping(value = "/api/users", method = RequestMethod.GET)
    public @ResponseBody Iterable<Account> getAllUsers() {
        //when called with GET, lists users
        // This returns a JSON or XML with the users
        return accountRepository.findAll();
    }

    @ApiOperation(value = "Show account with id number", response = Iterable.class)
    @RequestMapping(value = "/api/users/{id}", method = RequestMethod.GET)
    public Account getUser(@PathVariable Integer id){
        //when called with GET, shows user record
        return accountRepository.findOne(id);
    }

    @ApiOperation(value = "Delete user with id number", response = Iterable.class)
    @RequestMapping(value = "/api/users/{id}", method = RequestMethod.DELETE)
    public @ResponseBody void deleteUser(@PathVariable Integer id){

        //               when called with DELETE, deletes user record
        accountRepository.delete(id);

    }
    @ApiOperation(value = "Change account with id number", response = Iterable.class)
    @RequestMapping(value = "/api/users/{id}", method = RequestMethod.PUT)
    public @ResponseBody void putUser (@PathVariable Integer id, @RequestBody Account a){
        Account n;
        n = accountRepository.findOne(id);
        n.setName(a.getName());
        n.setAddress(a.getAddress());
        accountRepository.save(n);
    }

}
